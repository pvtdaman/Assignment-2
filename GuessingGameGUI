import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class GuessingGameGUI extends JFrame {
    private JLabel betLabel;
    private JTextField betField;
    private JLabel guessLabel;
    private JTextField guessField;
    private JButton playButton;
    private JButton resetButton;
    private JTextArea resultArea;
    private JLabel coinBalanceLabel;
    private int randomNumber;
    private int playerBet;
    private int totalCoins;
    private ArrayList<Player> leaderboard;

    public GuessingGameGUI() {
        // Set up the JFrame properties
        setTitle("Guessing Game with Betting");
        setSize(400, 300);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Initialize components
        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        betLabel = new JLabel("Enter your bet:");
        betField = new JTextField();
        guessLabel = new JLabel("Enter your guess (1-10):");
        guessField = new JTextField();
        playButton = new JButton("Play");
        resetButton = new JButton("Reset");
        resultArea = new JTextArea();
        resultArea.setEditable(false);
        coinBalanceLabel = new JLabel("Coin Balance: 100");

        // Add components to the inputPanel
        inputPanel.add(betLabel);
        inputPanel.add(betField);
        inputPanel.add(guessLabel);
        inputPanel.add(guessField);
        inputPanel.add(playButton);
        inputPanel.add(resetButton);
        inputPanel.add(coinBalanceLabel);

        // Add inputPanel to the top of the JFrame
        add(inputPanel, BorderLayout.NORTH);

        // Add resultArea to the center of the JFrame
        add(resultArea, BorderLayout.CENTER);

        // Add ActionListener to the playButton
        playButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                playGame();
            }
        });

        // Add ActionListener to the resetButton
        resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                resetGame();
            }
        });

        // Initialize totalCoins and leaderboard
        totalCoins = 100;
        leaderboard = new ArrayList<>();
    }

    private void playGame() {
        // Get the player's bet and guess from the text fields
        try {
            playerBet = Integer.parseInt(betField.getText());
            int playerGuess = Integer.parseInt(guessField.getText());

            // Generate a random number between 1 and 10
            randomNumber = new Random().nextInt(10) + 1;

            // Determine if the player won or lost the bet
            if (playerGuess == randomNumber) {
                totalCoins += playerBet;
                resultArea.setText("Congratulations! You guessed correctly!\nYou won " + playerBet + " coins.");
                playWinSound(); // Play sound effect for winning
            } else {
                totalCoins -= playerBet;
                resultArea.setText("Sorry, the correct number was " + randomNumber + ".\nYou lost " + playerBet + " coins.");
            }

            // Update coin balance label
            coinBalanceLabel.setText("Coin Balance: " + totalCoins);

            // Add the player to the leaderboard
            leaderboard.add(new Player("Player", totalCoins));

            // Sort the leaderboard in descending order of totalCoins
            Collections.sort(leaderboard, Collections.reverseOrder());

            // Reset guessField for the next round
            guessField.setText("");
            resultArea.append("\n---------------------");

        } catch (NumberFormatException ex) {
            resultArea.setText("Please enter valid numbers for bet and guess.");
        }
    }

    private void playWinSound() {
        // Play sound effect for winning (replace with your preferred sound file)
        // For simplicity, we're just printing a message here.
        System.out.println("You won!");
    }

    private void resetGame() {
        // Reset the game for a new round
        totalCoins = 100;
        resultArea.setText("");
        guessField.setText("");
        coinBalanceLabel.setText("Coin Balance: " + totalCoins);
    }

    // Player class to store player's name and totalCoins for leaderboard
    private static class Player implements Comparable<Player> {
        private final String name;
        private final int totalCoins;

        public Player(String name, int totalCoins) {
            this.name = name;
            this.totalCoins = totalCoins;
        }

        public String getName() {
            return name;
        }

        public int getTotalCoins() {
            return totalCoins;
        }

        @Override
        public int compareTo(Player other) {
            return Integer.compare(this.totalCoins, other.totalCoins);
        }
    }

    public static void main(String[] args) {
        // Create and display the GUI
        SwingUtilities.invokeLater(() -> {
            GuessingGameGUI gui = new GuessingGameGUI();
            gui.setVisible(true);
        });
    }
}
